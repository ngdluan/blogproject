generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./data.db"
}

model User {
  id       String       @id @default(uuid())
  email    String       @unique
  tel      String?      @unique
  userName String?      @unique
  name     String?
  hash     String
  role     String       @default("USER")
  status   String?
  verify   Boolean?
  code     Int?
  wrong    Int?
  forget   Boolean?
  iAt      DateTime     @default(now())
  uAt      DateTime     @updatedAt
  Detail   UserDetail[]
  Address  Address[]
  Order    Order[]
  Cart     Cart[]
  Coupon   Coupon?      @relation(fields: [couponId], references: [id])
  couponId String?
  Role     Role[]
  Comment  Comment[]
}

model Role {
  id    String  @id @default(uuid())
  key   String
  value Boolean
  User  User[]

  @@unique([key, value])
}

model Address {
  id      String   @id @default(uuid())
  country String   @default("vietnam")
  code    String?
  city    String?
  ward    String?
  address String?
  tel     String?
  User    User?    @relation(fields: [userId], references: [id])
  userId  String?
  Order   Order[]
  main    Boolean?
  iAt     DateTime @default(now())
  uAt     DateTime @updatedAt
}

model UserDetail {
  id     String   @id @default(uuid())
  key    String
  value  String
  User   User?    @relation(fields: [userId], references: [id])
  userId String?
  iAt    DateTime @default(now())
  uAt    DateTime @updatedAt
}

model Product {
  id          String        @id @default(uuid())
  name        String
  Tags        Tag[]
  ProductAttr ProductAttr[]
  ProductVar  ProductVar[]
  Category    Category[]
  iAt         DateTime      @default(now())
  uAt         DateTime      @updatedAt
  Comment     Comment[]
  Image       Image[]
}

model Image {
  id        String   @id @default(uuid())
  link      String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Tag {
  id      String    @id @default(uuid())
  key     String
  value   String
  Product Product[]

  @@unique([key, value])
}

model ProductAttr {
  id           String       @id @default(uuid())
  key          String
  value        String
  Product      Product[]
  ProductPrice ProductVar[]
  iAt          DateTime     @default(now())
  uAt          DateTime     @updatedAt

  @@unique([key, value])
}

model ProductVar {
  id          String        @id @default(uuid())
  price       Int?
  public      Boolean?      @default(false)
  sku         String?       @unique
  kiotId      String?       @unique
  quantity    Int?
  Product     Product       @relation(fields: [productId], references: [id])
  productId   String
  ProductAttr ProductAttr[]
  ProductMove ProductMove[]
  Coupon      Coupon?       @relation(fields: [couponId], references: [id])
  couponId    String?
  iAt         DateTime      @default(now())
  uAt         DateTime      @updatedAt
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  details String
  Product Product[]
  iAt     DateTime  @default(now())
  uAt     DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
  content   String?
  iAt       DateTime @default(now())
  uAt       DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  star      Int?
}

model Order {
  id        String        @id @default(uuid())
  User      User?         @relation(fields: [userId], references: [id])
  userId    String?
  Address   Address?      @relation(fields: [addressId], references: [id])
  addressId String?
  listOrder ProductMove[]
  iAt       DateTime      @default(now())
  uAt       DateTime      @updatedAt
  Coupon    Coupon[]
  couponId  String?
}

model ProductMove {
  id           String      @id @default(uuid())
  ProductVar   ProductVar? @relation(fields: [productVarId], references: [id])
  productVarId String?
  Order        Order?      @relation(fields: [orderId], references: [id])
  orderId      String?
  quantity     Int         @default(0)
  couponId     String?
  Cart         Cart?       @relation(fields: [cartId], references: [id])
  cartId       String?
  status       String      @default("CART")
  iAt          DateTime    @default(now())
  uAt          DateTime    @updatedAt
}

model Coupon {
  id           String       @id @default(uuid())
  applyProduct ProductVar[]
  Order        Order[]
  type         String
  code         String
  discountType String
  value        String
  maxValue     Int?
  minValue     Int?
  quantity     Int?
  User         User[]
  active       Boolean?
  validFrom    DateTime
  expriedAt    DateTime?
  iAt          DateTime     @default(now())
  uAt          DateTime     @updatedAt
}

model Cart {
  id          String        @id @default(uuid())
  ProductMove ProductMove[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
}
